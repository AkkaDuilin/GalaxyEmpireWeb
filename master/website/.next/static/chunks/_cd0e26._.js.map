{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://D%3A/GalaxyEmpireWeb/GalaxyEmpireWeb/master/website/galaxyweb/lib/utils.ts"],"sourcesContent":["import { type ClassValue, clsx } from 'clsx';\r\nimport { twMerge } from 'tailwind-merge';\r\nimport { Active, DataRef, Over } from '@dnd-kit/core';\r\n\r\n\r\n//type DraggableData = ColumnDragData | TaskDragData;\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs));\r\n}\r\n\r\n// export function hasDraggableData<T extends Active | Over>(\r\n//   entry: T | null | undefined\r\n// ): entry is T & {\r\n//   data: DataRef<DraggableData>;\r\n// } {\r\n//   if (!entry) {\r\n//     return false;\r\n//   }\r\n\r\n//   const data = entry.data.current;\r\n\r\n//   if (data?.type === 'Column' || data?.type === 'Task') {\r\n//     return true;\r\n//   }\r\n\r\n//   return false;\r\n// }\r\n\r\nexport function formatBytes(\r\n  bytes: number,\r\n  opts: {\r\n    decimals?: number;\r\n    sizeType?: 'accurate' | 'normal';\r\n  } = {}\r\n) {\r\n  const { decimals = 0, sizeType = 'normal' } = opts;\r\n\r\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\r\n  const accurateSizes = ['Bytes', 'KiB', 'MiB', 'GiB', 'TiB'];\r\n  if (bytes === 0) return '0 Byte';\r\n  const i = Math.floor(Math.log(bytes) / Math.log(1024));\r\n  return `${(bytes / Math.pow(1024, i)).toFixed(decimals)} ${\r\n    sizeType === 'accurate' ? accurateSizes[i] ?? 'Bytest' : sizes[i] ?? 'Bytes'\r\n  }`;\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAMO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,wIAAA,CAAA,OAAI,AAAD,EAAE;AACtB;AAoBO,SAAS,YACd,KAAa,EACb,OAGI,CAAC,CAAC;IAEN,MAAM,EAAE,WAAW,CAAC,EAAE,WAAW,QAAQ,EAAE,GAAG;IAE9C,MAAM,QAAQ;QAAC;QAAS;QAAM;QAAM;QAAM;KAAK;IAC/C,MAAM,gBAAgB;QAAC;QAAS;QAAO;QAAO;QAAO;KAAM;IAC3D,IAAI,UAAU,GAAG,OAAO;IACxB,MAAM,IAAI,KAAK,KAAK,CAAC,KAAK,GAAG,CAAC,SAAS,KAAK,GAAG,CAAC;IAChD,OAAO,GAAG,CAAC,QAAQ,KAAK,GAAG,CAAC,MAAM,EAAE,EAAE,OAAO,CAAC,UAAU,CAAC,EACvD,aAAa,aAAa,aAAa,CAAC,EAAE,IAAI,WAAW,KAAK,CAAC,EAAE,IAAI,SACrE;AACJ"}},
    {"offset": {"line": 41, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["file://D%3A/GalaxyEmpireWeb/GalaxyEmpireWeb/master/website/galaxyweb/components/ui/button.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport { Slot } from '@radix-ui/react-slot';\r\nimport { cva, type VariantProps } from 'class-variance-authority';\r\n\r\nimport { cn } from '@/lib/utils';\r\n\r\nconst buttonVariants = cva(\r\n  'inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50',\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default:\r\n          'bg-primary text-primary-foreground shadow hover:bg-primary/90',\r\n        destructive:\r\n          'bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90',\r\n        outline:\r\n          'border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground',\r\n        secondary:\r\n          'bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80',\r\n        ghost: 'hover:bg-accent hover:text-accent-foreground',\r\n        link: 'text-primary underline-offset-4 hover:underline'\r\n      },\r\n      size: {\r\n        default: 'h-9 px-4 py-2',\r\n        sm: 'h-8 rounded-md px-3 text-xs',\r\n        lg: 'h-10 rounded-md px-8',\r\n        icon: 'h-9 w-9'\r\n      }\r\n    },\r\n    defaultVariants: {\r\n      variant: 'default',\r\n      size: 'default'\r\n    }\r\n  }\r\n);\r\n\r\nexport interface ButtonProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n    VariantProps<typeof buttonVariants> {\r\n  asChild?: boolean;\r\n}\r\n\r\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\r\n    const Comp = asChild ? Slot : 'button';\r\n    return (\r\n      <Comp\r\n        className={cn(buttonVariants({ variant, size, className }))}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    );\r\n  }\r\n);\r\nButton.displayName = 'Button';\r\n\r\nexport { Button, buttonVariants };\r\n"],"names":[],"mappings":";;;;;AAAA;AAEA;AAEA;AAHA;;;;;;AAKA,MAAM,iBAAiB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACvB,qNACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,8JAAM,UAAU,MAC7B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,mKAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,OAAO,WAAW,GAAG"}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file://D%3A/GalaxyEmpireWeb/GalaxyEmpireWeb/master/website/galaxyweb/components/ui/label.tsx"],"sourcesContent":["'use client';\r\n\r\nimport * as React from 'react';\r\nimport * as LabelPrimitive from '@radix-ui/react-label';\r\nimport { cva, type VariantProps } from 'class-variance-authority';\r\n\r\nimport { cn } from '@/lib/utils';\r\n\r\nconst labelVariants = cva(\r\n  'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70'\r\n);\r\n\r\nconst Label = React.forwardRef<\r\n  React.ElementRef<typeof LabelPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\r\n    VariantProps<typeof labelVariants>\r\n>(({ className, ...props }, ref) => (\r\n  <LabelPrimitive.Root\r\n    ref={ref}\r\n    className={cn(labelVariants(), className)}\r\n    {...props}\r\n  />\r\n));\r\nLabel.displayName = LabelPrimitive.Root.displayName;\r\n\r\nexport { Label };\r\n"],"names":[],"mappings":";;;;AAEA;AAEA;AAEA;AAHA;AAHA;;;;;;AAQA,MAAM,gBAAgB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,8JAAM,UAAU,MAI5B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,qKAAe,IAAI;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;;AAGb,MAAM,WAAW,GAAG,qKAAe,IAAI,CAAC,WAAW"}},
    {"offset": {"line": 147, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 153, "column": 0}, "map": {"version":3,"sources":["file://D%3A/GalaxyEmpireWeb/GalaxyEmpireWeb/master/website/galaxyweb/components/ui/form.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport * as LabelPrimitive from '@radix-ui/react-label';\r\nimport { Slot } from '@radix-ui/react-slot';\r\nimport {\r\n  Controller,\r\n  ControllerProps,\r\n  FieldPath,\r\n  FieldValues,\r\n  FormProvider,\r\n  useFormContext\r\n} from 'react-hook-form';\r\n\r\nimport { cn } from '@/lib/utils';\r\nimport { Label } from '@/components/ui/label';\r\n\r\nconst Form = FormProvider;\r\n\r\ntype FormFieldContextValue<\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\r\n> = {\r\n  name: TName;\r\n};\r\n\r\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\r\n  {} as FormFieldContextValue\r\n);\r\n\r\nconst FormField = <\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\r\n>({\r\n  ...props\r\n}: ControllerProps<TFieldValues, TName>) => {\r\n  return (\r\n    <FormFieldContext.Provider value={{ name: props.name }}>\r\n      <Controller {...props} />\r\n    </FormFieldContext.Provider>\r\n  );\r\n};\r\n\r\nconst useFormField = () => {\r\n  const fieldContext = React.useContext(FormFieldContext);\r\n  const itemContext = React.useContext(FormItemContext);\r\n  const { getFieldState, formState } = useFormContext();\r\n\r\n  const fieldState = getFieldState(fieldContext.name, formState);\r\n\r\n  if (!fieldContext) {\r\n    throw new Error('useFormField should be used within <FormField>');\r\n  }\r\n\r\n  const { id } = itemContext;\r\n\r\n  return {\r\n    id,\r\n    name: fieldContext.name,\r\n    formItemId: `${id}-form-item`,\r\n    formDescriptionId: `${id}-form-item-description`,\r\n    formMessageId: `${id}-form-item-message`,\r\n    ...fieldState\r\n  };\r\n};\r\n\r\ntype FormItemContextValue = {\r\n  id: string;\r\n};\r\n\r\nconst FormItemContext = React.createContext<FormItemContextValue>(\r\n  {} as FormItemContextValue\r\n);\r\n\r\nconst FormItem = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => {\r\n  const id = React.useId();\r\n\r\n  return (\r\n    <FormItemContext.Provider value={{ id }}>\r\n      <div\r\n        ref={ref}\r\n        className={cn('mb-2 space-y-2 lg:mb-0', className)}\r\n        {...props}\r\n      />\r\n    </FormItemContext.Provider>\r\n  );\r\n});\r\nFormItem.displayName = 'FormItem';\r\n\r\nconst FormLabel = React.forwardRef<\r\n  React.ElementRef<typeof LabelPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\r\n>(({ className, ...props }, ref) => {\r\n  const { error, formItemId } = useFormField();\r\n\r\n  return (\r\n    <Label\r\n      ref={ref}\r\n      className={cn(error && 'text-destructive', className)}\r\n      htmlFor={formItemId}\r\n      {...props}\r\n    />\r\n  );\r\n});\r\nFormLabel.displayName = 'FormLabel';\r\n\r\nconst FormControl = React.forwardRef<\r\n  React.ElementRef<typeof Slot>,\r\n  React.ComponentPropsWithoutRef<typeof Slot>\r\n>(({ ...props }, ref) => {\r\n  const { error, formItemId, formDescriptionId, formMessageId } =\r\n    useFormField();\r\n\r\n  return (\r\n    <Slot\r\n      ref={ref}\r\n      id={formItemId}\r\n      aria-describedby={\r\n        !error\r\n          ? `${formDescriptionId}`\r\n          : `${formDescriptionId} ${formMessageId}`\r\n      }\r\n      aria-invalid={!!error}\r\n      {...props}\r\n    />\r\n  );\r\n});\r\nFormControl.displayName = 'FormControl';\r\n\r\nconst FormDescription = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLParagraphElement>\r\n>(({ className, ...props }, ref) => {\r\n  const { formDescriptionId } = useFormField();\r\n\r\n  return (\r\n    <p\r\n      ref={ref}\r\n      id={formDescriptionId}\r\n      className={cn('text-[0.8rem] text-muted-foreground', className)}\r\n      {...props}\r\n    />\r\n  );\r\n});\r\nFormDescription.displayName = 'FormDescription';\r\n\r\nconst FormMessage = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLParagraphElement>\r\n>(({ className, children, ...props }, ref) => {\r\n  const { error, formMessageId } = useFormField();\r\n  const body = error ? String(error?.message) : children;\r\n\r\n  if (!body) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <p\r\n      ref={ref}\r\n      id={formMessageId}\r\n      className={cn('text-[0.8rem] font-medium text-destructive', className)}\r\n      {...props}\r\n    >\r\n      {body}\r\n    </p>\r\n  );\r\n});\r\nFormMessage.displayName = 'FormMessage';\r\n\r\nexport {\r\n  useFormField,\r\n  Form,\r\n  FormItem,\r\n  FormLabel,\r\n  FormControl,\r\n  FormDescription,\r\n  FormMessage,\r\n  FormField\r\n};\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 364, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 370, "column": 0}, "map": {"version":3,"sources":["file://D%3A/GalaxyEmpireWeb/GalaxyEmpireWeb/master/website/galaxyweb/components/ui/input.tsx"],"sourcesContent":["import * as React from 'react';\r\n\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface InputProps\r\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\r\n\r\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\r\n  ({ className, type, ...props }, ref) => {\r\n    return (\r\n      <input\r\n        type={type}\r\n        className={cn(\r\n          'flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50',\r\n          className\r\n        )}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    );\r\n  }\r\n);\r\nInput.displayName = 'Input';\r\n\r\nexport { Input };\r\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAKA,MAAM,sBAAQ,8JAAM,UAAU,MAC5B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,6LAAC;QACC,MAAM;QACN,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EACV,yUACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,MAAM,WAAW,GAAG"}},
    {"offset": {"line": 400, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 406, "column": 0}, "map": {"version":3,"sources":["file://D%3A/GalaxyEmpireWeb/GalaxyEmpireWeb/master/website/galaxyweb/app/auth/_components/user-auth-form.tsx"],"sourcesContent":["'use client';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\r\nimport { Input } from '@/components/ui/input';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport { useSearchParams } from 'next/navigation';\r\nimport { useForm } from 'react-hook-form';\r\nimport { toast } from 'sonner';\r\nimport { useTransition, useState, useEffect } from 'react';\r\nimport * as z from 'zod';\r\nimport axios from 'axios';\r\n\r\nconst API_BASE_URL = \"/api/v1\";\r\n\r\nconst formSchema = z.object({\r\n  username: z.string().min(1, \"Username is required\"),\r\n  password: z.string().min(1, \"Password is required\"),\r\n  captcha: z.string().min(1, \"Captcha is required\")\r\n});\r\n\r\n// 登录表单类型\r\ntype UserFormValue = z.infer<typeof formSchema>;\r\n\r\nexport default function UserAuthForm() {\r\n  const [loading, startTransition] = useTransition();\r\n  const [captchaId, setCaptchaId] = useState(\"\");\r\n\r\n  // 登录表单\r\n  const loginForm = useForm<UserFormValue>({\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues: {\r\n      username: '',\r\n      password: '',\r\n      captcha: ''\r\n    }\r\n  });\r\n\r\n  // 获取验证码\r\n  const refreshCaptcha = async () => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/captcha`);\r\n      const data = response.data;\r\n      console.log('验证码响应:', data);\r\n      setCaptchaId(data.captcha_id);\r\n      console.log('设置的captchaId:', data.captcha_id);\r\n    } catch (err) {\r\n      console.error('获取验证码失败:', err);\r\n      toast.error(\"获取验证码失败\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    refreshCaptcha();\r\n  }, []);\r\n\r\n  const onSubmit = async (data: UserFormValue) => {\r\n    startTransition(async () => {\r\n      try {\r\n        toast.info('Logging in...');\r\n        const response = await fetch(`${API_BASE_URL}/login`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'captchaId': captchaId,\r\n            'userInput': data.captcha\r\n          },\r\n          body: JSON.stringify({\r\n            username: data.username,\r\n            password: data.password,\r\n            auto_register: true\r\n          })\r\n        });\r\n\r\n        console.log('Login response status:', response.status);\r\n        const result = await response.json();\r\n        console.log('Login response data:', result);\r\n        \r\n        if (result.token) {\r\n          localStorage.setItem(\"token\", result.token);\r\n          toast.success('Login successful! Redirecting...', {\r\n            duration: 2000,\r\n          });\r\n          setTimeout(() => {\r\n            window.location.href = '/dashboard';\r\n          }, 2000);\r\n        } else {\r\n          toast.error(`Login failed: ${result.message || 'Unknown error'}`, {\r\n            duration: 3000,\r\n          });\r\n          refreshCaptcha();\r\n        }\r\n      } catch (error) {\r\n        console.error('Request error:', error);\r\n        toast.error('Login failed, please check your network connection', {\r\n          duration: 3000,\r\n        });\r\n        refreshCaptcha();\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full\">\r\n      <Form {...loginForm}>\r\n        <form onSubmit={loginForm.handleSubmit(onSubmit)} className=\"w-full space-y-2\">\r\n          <FormField\r\n            control={loginForm.control}\r\n            name=\"username\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel>Username</FormLabel>\r\n                <FormControl>\r\n                  <Input\r\n                    type=\"text\"\r\n                    placeholder=\"Enter username\"\r\n                    disabled={loading}\r\n                    {...field}\r\n                  />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n\r\n          <FormField\r\n            control={loginForm.control}\r\n            name=\"password\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel>Password</FormLabel>\r\n                <FormControl>\r\n                  <Input\r\n                    type=\"password\"\r\n                    placeholder=\"Enter password\"\r\n                    disabled={loading}\r\n                    {...field}\r\n                  />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n\r\n          <FormField\r\n            control={loginForm.control}\r\n            name=\"captcha\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel>Captcha</FormLabel>\r\n                <div className=\"flex space-x-2\">\r\n                  <FormControl>\r\n                    <Input\r\n                      type=\"text\"\r\n                      placeholder=\"Enter captcha\"\r\n                      disabled={loading}\r\n                      {...field}\r\n                    />\r\n                  </FormControl>\r\n                  {captchaId && (\r\n                    <img\r\n                      src={`http://localhost:9333/api/v1/captcha/${captchaId}`}\r\n                      alt=\"Captcha\"\r\n                      className=\"h-10 cursor-pointer\"\r\n                      onClick={refreshCaptcha}\r\n                    />\r\n                  )}\r\n                </div>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n\r\n          <Button disabled={loading} className=\"w-full\" type=\"submit\">\r\n            Login\r\n          </Button>\r\n        </form>\r\n      </Form>\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 709, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}